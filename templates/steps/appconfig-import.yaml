parameters:
- name: dryRun
  type: boolean
  default: true
- name: environmentObj
  displayName: deployment env
  type: object
- name: appDeployConfig
  displayName: Details to deploy the app
  type: object
  default: null
- name: workingDirectory
  type: string
- name: serviceName
  type: string
- name: PSHelperDirectory
  type: string 
- name: secretName
  type: string 
  default: "ffc-demo-collector-secret-pipeline-variable"   
steps:
  - checkout: Self
    path: s/ 
  - checkout: PipelineCommon
    path: s/PipelineCommon

  - ${{ if ne(parameters.appDeployConfig, '') }}:
    - task: AzureCLI@2
      displayName: 'List Variables'
      name: GetVariableList
      env:
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
        DevOpsUri: $(System.CollectionURI)
        DevOpsProject: $(System.TeamProject)
      inputs:
        azureSubscription: ${{ parameters.environmentObj.serviceConnection }}
        scriptType: pscore
        scriptLocation: scriptPath
        scriptPath: '$(Pipeline.Workspace)/s/PipelineCommon/templates/powershell/build/ListSecrets.ps1'
        arguments: -VariableGroups '${{ join(';',parameters.appDeployConfig.variableGroups) }}' -EnvName ${{ parameters.environmentObj.name }} -ServiceName ${{ parameters.serviceName }} -PSHelperDirectory ${{ parameters.PSHelperDirectory }}
        addSpnToEnvironment: true          
        failOnStandardError: false
        workingDirectory: '$(Pipeline.Workspace)/s'
        
    - script: echo $(${{ parameters.secretName }})
    - task: AzureCLI@2
      displayName: 'Azure CLI '
      env:
        varName: ffc-demo-collector-secret-pipeline-variable
        secret1: $($varName)

      inputs:
        azureSubscription: ${{ parameters.environmentObj.serviceConnection }}
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $secretVariables= ("$(GetVariableList.secretVariables)" -split ";")          
          write-output $secretVariables[0]            
          $secretWithoutBase64 =[Text.Encoding]::ASCII.GetBytes("$(ffc-demo-collector-secret-pipeline-variable)")                 
          write-output "secret1: $secretWithoutBase64 "     
           write-output "secretvertical: $secretWithoutBase64.ToCharArray() "
          $secret = [Convert]::ToBase64String( [Text.Encoding]::ASCII.GetBytes("$ENV:secret1") )
          write-output "secret1: ($ENV:secret1).ToCharArray() "          
          az keyvault secret set --name $ENV:varName --vault-name ${{ parameters.environmentObj.appKeyVault }} --value (ConvertTo-SecureString -String $secret -AsPlainText -Force)
          az keyvault secret set --name $ENV:varName --vault-name ${{ parameters.environmentObj.appKeyVault }} --value (ConvertTo-SecureString -String $secretWithoutBase64 -AsPlainText -Force)
        addSpnToEnvironment: true

        

    - task: PowerShell@2
      displayName: 'Validate Config File'
      inputs:
        targetType: filePath
        filePath: '$(Pipeline.Workspace)/s/PipelineCommon/templates/powershell/build/ValidateConfigFile.ps1'
        arguments: -SchemaFilePath '$(Pipeline.Workspace)/s/PipelineCommon/templates/config/schema.json'  -ConfigFilePath '${{ parameters.appDeployConfig.filepath }}/appConfig.${{ parameters.environmentObj.name }}.json'
        failOnStderr: true
        pwsh: true
        workingDirectory: '$(Pipeline.Workspace)/s'

    - task: replacetokens@5
      displayName: 'Replace tokens in config'
      inputs:
        tokenPattern: doublebraces
        inlineVariables: |
          subscriptionId: ${{ parameters.environmentObj.subscriptionId }}
          keyvaultName: ${{ parameters.environmentObj.appKeyVault }}
          serviceName: ${{ parameters.serviceName }}
          env: ${{ parameters.environmentObj.name }}
        targetFiles: |
          ${{ parameters.workingDirectory }}/${{ parameters.appDeployConfig.filepath }}/appConfig.${{ parameters.environmentObj.name }}.json

  
    - task: AzureAppConfigurationPush@6
      displayName: 'Import Azure App Configuration'
      inputs:
        azureSubscription: ${{ parameters.environmentObj.serviceConnection }}
        AppConfigurationEndpoint: 'https://${{ parameters.environmentObj.appConfiguration }}.azconfig.io'
        ConfigurationFile: '${{ parameters.workingDirectory }}/${{ parameters.appDeployConfig.filepath }}/appConfig.${{ parameters.environmentObj.name }}.json'
        FileContentProfile: appconfig/kvset
        DryRun: ${{ parameters.dryRun }}