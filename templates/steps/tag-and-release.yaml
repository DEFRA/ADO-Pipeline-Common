parameters:
  - name: appBuildConfig
    type: object       
  - name: appVersion
    type: string 

steps:  
- checkout: self
  path: s/source
  persistCredentials: true

- task: PowerShell@2
  displayName: Git-Tag
  inputs:
    targetType: 'inline'
    script: |
      $version = "${{ parameters.appVersion }}"
      $exists = git tag -l "$version"
      if ($exists) { 
        echo "Tag already exists"
      }
      $giturl=git config --get remote.origin.url
      $gitEndpoint = $giturl.split("/")[-2]
      $gitRepoName = $giturl.split("/")[-1] -replace ".git", ""
      $latestReleaseTag=((Invoke-WebRequest -Uri https://api.github.com/repos/$gitEndpoint/$gitRepoName/releases/latest).Content | ConvertFrom-Json).tag_name
      if ($latestReleaseTag -eq $version) {
        echo "Release already exists"
        Write-Output "##vso[task.setvariable variable=ReleaseExists]true"
      }
      else {
        Write-Output "##vso[task.setvariable variable=ReleaseExists]false"
      }
      git tag $version --force
      git push origin $version
      echo "Tag $version updated to latest commit"
    workingDirectory: '$(Pipeline.Workspace)/s/source'

- task: GitHubRelease@1
  displayName: 'GitHub-Release'
  condition: eq(variables.ReleaseExists, 'false')
  inputs:
    gitHubConnection: ${{ parameters.appBuildConfig.GitHubReleaseConnection}}
    repositoryName: '$(Build.Repository.Name)'
    tagSource: userSpecifiedTag
    tag: ${{ parameters.appVersion }}
    title: 'Release ${{ parameters.appVersion }}'
    releaseNotesSource: inline
    isPreRelease: false