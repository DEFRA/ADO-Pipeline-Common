parameters:
  - name: serviceName
  - name: IsPrBuild
    displayName: Is PR Build
    type: boolean
    default: false   
  - name: appTestConfig
    displayName: AppTestConfig
    type: object 
  - name: isZap
    type: boolean 
    default: false
  - name: isAxe
    type: boolean 
    default: false

steps:
  - script: | 
      cd $(System.DefaultWorkingDirectory)
      wget https://github.com/jgm/pandoc/releases/download/3.1.11/pandoc-3.1.11-1-amd64.deb
      sudo dpkg -i pandoc-3.1.11-1-amd64.deb
    displayName: 'Pandoc tool'

  - task: AzureCLI@2
    displayName: 'Provision Resources for Tests'
    inputs:
      azureSubscription: ${{ parameters.appTestConfig.serviceConnection }}
      scriptType: pscore
      scriptLocation: scriptPath
      scriptPath: '$(Pipeline.Workspace)/s/PipelineCommon/templates/powershell/test/Provision-Resources.ps1'
      arguments: > 
        -InfraChartHomeDir '$(Pipeline.Workspace)/s/helm/${{ parameters.serviceName }}-infra'
        -PipelineCommonDirectory '$(Pipeline.Workspace)/s/PipelineCommon'
        -ServiceName '${{ parameters.serviceName }}'
        -IsPrBuild '${{ parameters.IsPrBuild }}'
        -Environment '${{ parameters.appTestConfig.testEnvironment }}'
        -AzureServiceBusResourceGroup '${{ parameters.appTestConfig.azureServiceBusResourceGroup }}'
        -AzureServiceBusNamespace '${{ parameters.appTestConfig.azureServiceBusNamespace }}'
      addSpnToEnvironment: true
      failOnStandardError: false
      workingDirectory: '$(Pipeline.Workspace)/s'    
      

  - bash: 'env | sort'    

  # Run this task if './docker-compose.test.yaml' file present    
  - task: PowerShell@2
    displayName: Build test image
    condition: eq(variables['docker_compose_dot_test_yaml'], 'true')
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "In Progress: Build test image if ./docker-compose.test.yaml file exist"    
        Write-Host "Create powershell module for `Build` related task like 'buildTestImage'"

  # Run this task if './docker-compose.test.yaml' file present    
  - task: PowerShell@2
    displayName: Run tests
    condition: eq(variables['docker_compose_dot_test_yaml'], 'true')
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "In Progress: Run tests if ./docker-compose.test.yaml file exist"     
        Write-Host "Create powershell module for `Test` related task like 'runTests'"

  # Run this task if './docker-compose.acceptance.yaml' file present    
  - task: PowerShell@2
    displayName: Run Service Acceptance Tests
    condition: eq(variables['docker_compose_dot_zap_yaml'], 'true')
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "In Progress: Run Service Acceptance Tests if ./docker-compose.acceptance.yaml file exist"  
        Write-Host "Create powershell module for `Test` related task like 'runServiceAcceptanceTests'" 

  - ${{ if parameters.isZap }}:
    - template: /templates/steps/tests/owasp-test.yaml
      parameters:
        testDir : '$(Pipeline.Workspace)/s'
        testOuputDir: '$(Pipeline.Workspace)/s/test-output'
        typeOfTest: 'PreDeploy'
        url: ''              
  - ${{ if parameters.isAxe }}:
    - template: /templates/steps/tests/accessibility-test.yaml
      parameters:
        testDir : '$(Pipeline.Workspace)/s'
        testOuputDir: '$(Pipeline.Workspace)/s/test-output'
        typeOfTest: 'PreDeploy'
        url: ''          

  # Need to verify when to delete resources? After Pre deployment or post deployment test?
  - task: AzureCLI@2
    displayName: 'Delete Dynamically provisioned resources'
    condition: always()
    inputs:
      azureSubscription: ${{ parameters.appTestConfig.serviceConnection }}
      scriptType: pscore
      scriptLocation: scriptPath
      scriptPath: '$(Pipeline.Workspace)/s/PipelineCommon/templates/powershell/test/Delete-Resources.ps1'
      arguments: > 
        -PipelineCommonDirectory '$(Pipeline.Workspace)/s/PipelineCommon'
        -ServiceName '${{ parameters.serviceName }}'
        -IsPrBuild '${{ parameters.IsPrBuild }}'
        -Environment '${{ parameters.appTestConfig.testEnvironment }}'
        -AzureServiceBusResourceGroup '${{ parameters.appTestConfig.azureServiceBusResourceGroup }}'
        -AzureServiceBusNamespace '${{ parameters.appTestConfig.azureServiceBusNamespace }}'
      addSpnToEnvironment: true
      failOnStandardError: false
      workingDirectory: '$(Pipeline.Workspace)/s'           