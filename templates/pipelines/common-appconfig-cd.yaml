parameters:
- name: serviceName
  type: string
- name: agentImage
  type: string
  default: 'ubuntu-latest'
- name: privateAgentName
  displayName: Name of the private agent
  type: string
  default: ''
- name: environments
  displayName: list of deployment env
  type: object
- name: appDeployConfig
  displayName: Details to deploy the app
  type: object
  default: null
  
stages:                
  - stage: test
    jobs:
    - job: JobA
      steps:
      - pwsh: |
          $json="{'job1': {'Work': 'work1'}, 'job2': {'Work': 'work2'}}"
          Write-Host "##vso[task.setvariable variable=targets;isOutput=true]$json"
        name: setTargets
      - script: echo $(setTargets.targets)
        name: echovar

    - job: buildSrc
      dependsOn: JobA
      displayName: Build source
      strategy:
        matrix: $[ dependencies.JobA.outputs['setTargets.targets'] ]
      variables:
        targets: $[ dependencies.JobA.outputs['setTargets.targets'] ]
      steps:
      - pwsh: Write-Host "${{ convertToJson(variables) }}"
        displayName: 'Print all variables via expression'
  - ${{ each deploymentEnv in parameters.environments }}:
    - stage: ${{ deploymentEnv.name }}
      displayName: 'AppConfig CD ${{ deploymentEnv.name }}'
      variables:
        - ${{ each varGroup in parameters.appDeployConfig.variableGroups }}:
          - ${{ if contains( varGroup, deploymentEnv.name) }}:
            - group: '${{ varGroup }}'
        - name: serviceName
          value: ${{ parameters.serviceName }}
        - name: PSHelperDirectory
          value: '$(Pipeline.Workspace)/s/PipelineCommon/templates/powershell/modules/ps-helpers'
      ${{ if ne(deploymentEnv.privateAgentName, '') }}:
        pool:
          name: ${{ deploymentEnv.privateAgentName }}
      ${{ else }}:
        pool:
          vmImage: ${{ coalesce(parameters.agentImage, 'ubuntu-latest') }}
      jobs:
        - job: ListSecrets
          displayName: 'List Secrets ${{ deploymentEnv.name }}'                        
          steps:
            - checkout: PipelineCommon
              path: s/PipelineCommon
            - task: AzureCLI@2
              displayName: 'List Variables'
              name: GetVariableList
              env:
                AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
                DevOpsUri: $(System.CollectionURI)
                DevOpsProject: $(System.TeamProject)
              inputs:
                azureSubscription: ${{ deploymentEnv.serviceConnection }}
                scriptType: pscore
                scriptLocation: scriptPath
                scriptPath: '$(Pipeline.Workspace)/s/PipelineCommon/templates/powershell/build/ListSecrets.ps1'
                arguments: -VariableGroups '${{ join(';',parameters.appDeployConfig.variableGroups) }}' -EnvName ${{ deploymentEnv.name }} -ServiceName ${{ parameters.serviceName }} -PSHelperDirectory ${{ variables.PSHelperDirectory }}
                addSpnToEnvironment: true          
                failOnStandardError: false
                workingDirectory: '$(Pipeline.Workspace)/s'
        - job: ImportSecret          
          displayName: 'ImportSecret ${{ deploymentEnv.name }}' 
          dependsOn: ListSecrets
          strategy:
            matrix:  
              linux:
                imageName: 'ubuntu-latest'
          variables:
            secretVariables: $[ dependencies.ListSecrets.outputs['GetVariableList.secretVariables'] ]
          steps:
            - checkout: Self
              path: s/ 
            - checkout: PipelineCommon
              path: s/PipelineCommon            
            - ${{ each secret in split(variables.secretVariables, ';') }} :
              - template: /templates/steps/secrets-import-kv.yaml
                parameters:
                  environmentObj: ${{ deploymentEnv }} 
                  appDeployConfig: ${{ parameters.appDeployConfig }} 
                  workingDirectory: '$(Pipeline.Workspace)/s'
                  serviceName: ${{ parameters.serviceName }}
                  PSHelperDirectory: ${{ variables.PSHelperDirectory }}
                  secretName: ${{ secret }}
        - deployment: DryRun${{ deploymentEnv.name }}
          environment: ${{ deploymentEnv.name }}
          displayName: 'DryRun ${{ deploymentEnv.name }}' 
          strategy:
            runOnce:
              deploy:              
                steps:
                  - template: /templates/steps/appconfig-import.yaml
                    parameters:
                      dryRun: true
                      environmentObj: ${{ deploymentEnv }} 
                      appDeployConfig: ${{ parameters.appDeployConfig }} 
                      workingDirectory: '$(Pipeline.Workspace)/s'
                      serviceName: ${{ parameters.serviceName }}  
        - job: Review${{ deploymentEnv.name }}
          dependsOn: DryRun${{ deploymentEnv.name }}
          displayName: 'Review ${{ deploymentEnv.name }}'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Manual Validation'
              inputs:
                notifyUsers: 
                instructions: verify changes       
              enabled: false   
        - deployment: Publish${{ deploymentEnv.name }}
          environment: ${{ deploymentEnv.name }}
          dependsOn: Review${{ deploymentEnv.name }}
          displayName: 'Publish ${{ deploymentEnv.name }}'
          strategy:
            runOnce:
              deploy:                
                steps:             
                  - template: /templates/steps/appconfig-import.yaml
                    parameters:
                      dryRun: false
                      environmentObj: ${{ deploymentEnv }} 
                      appDeployConfig: ${{ parameters.appDeployConfig }}
                      workingDirectory: '$(Pipeline.Workspace)/s'
                      serviceName: ${{ parameters.serviceName }}