parameters:
- name: serviceName
  type: string
- name: agentImage
  type: string
  default: 'ubuntu-latest'
- name: privateAgentName
  displayName: Name of the private agent
  type: string
  default: ''
- name: environments
  displayName: list of deployment env
  type: object
- name: appDeployConfig
  displayName: Details to deploy the app
  type: object
  default: null
  
stages:                   
  - ${{ each deploymentEnv in parameters.environments }}:
    - stage: ${{ deploymentEnv.name }}
      displayName: 'AppConfig CD ${{ deploymentEnv.name }}'
      variables:
        - group: '${{ parameters.serviceName }}-${{ deploymentEnv.name }}'
        - name: serviceName
          value: ${{ parameters.serviceName }} 
      ${{ if ne(deploymentEnv.privateAgentName, '') }}:
        pool:
          name: ${{ deploymentEnv.privateAgentName }}
      ${{ else }}:
        pool:
          vmImage: ${{ coalesce(parameters.agentImage, 'ubuntu-latest') }}
      jobs:
        - deployment: DryRun${{ deploymentEnv.name }}
          environment: ${{ deploymentEnv.name }}
          displayName: 'DryRun ${{ deploymentEnv.name }}' 
          strategy:
            runOnce:
              deploy:              
                steps:
                  - template: /templates/steps/appconfig-import.yaml
                    parameters:
                      dryRun: true
                      environmentObj: ${{ deploymentEnv }} 
                      appDeployConfig: ${{ parameters.appDeployConfig }} 
                      workingDirectory: '$(Pipeline.Workspace)/s'
                      serviceName: ${{ parameters.serviceName }}      
        - job: Review${{ deploymentEnv.name }}
          dependsOn: DryRun${{ deploymentEnv.name }}
          displayName: 'Review ${{ deploymentEnv.name }}'
          pool: server
          steps:
            - task: ManualValidation@0
              displayName: 'Manual Validation'
              inputs:
                notifyUsers: 
                instructions: verify changes       
              enabled: false   
        - deployment: Publish${{ deploymentEnv.name }}
          environment: ${{ deploymentEnv.name }}
          dependsOn: Review${{ deploymentEnv.name }}
          displayName: 'Publish ${{ deploymentEnv.name }}'
          strategy:
            runOnce:
              deploy:                
                steps:             
                  - template: /templates/steps/appconfig-import.yaml
                    parameters:
                      dryRun: false
                      environmentObj: ${{ deploymentEnv }} 
                      appDeployConfig: ${{ parameters.appDeployConfig }}
                      workingDirectory: '$(Pipeline.Workspace)/s'
                      serviceName: ${{ parameters.serviceName }}