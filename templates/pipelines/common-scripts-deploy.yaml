parameters:
- name: environments
  type: object
- name: scriptsList
  type: object
- name: deployFromFeature
  displayName: Deploy to Development Environment from feature branch
  type: boolean
  default: false
- name: variableFiles
  displayName: Variables file list
  type: object
  default: []
- name: regionalVariableFiles
  displayName: Regional Variables file list
  type: object
  default: []
- name: agentImage
  type: string
  default: ''
- name: privateAgentName
  type: string
  default: ''
- name: additionalRepositories
  type: object
  default: []
- name: filePathsForTransform
  displayName: Additional files location to replace tokens
  type: string
  default: ''
- name: tokenReplaceEscapeConfig
  type: string
  default: auto
  values:
  - auto
  - none
  - json
  - xml

stages:
  - stage: Verification
    pool:
      ${{ if ne(parameters.privateAgentName, '') }}:
        name: ${{ parameters.privateAgentName }}
      ${{ else }}:
        vmImage: ${{ coalesce(parameters.agentImage, 'windows-latest') }}
    jobs:
      - job: ValidateConsumerPipeline
        displayName: Validate Mandatory properties in Consumer pipeline Environments objects
        steps:
          - template: /templates/steps/initialize.yaml
            parameters:
              tokenReplaceLocations: ${{ parameters.filePathsForTransform }}
              tokenReplaceEscapeConfig: ${{ parameters.tokenReplaceEscapeConfig }}

          - template: /templates/steps/powershell.yaml
            parameters:
              scriptsList:
                - displayName: Validate mandatory Consumer pipeline environment object
                  scriptRepo: PipelineCommonFiles
                  scriptPath: templates/powershell/ValidateConsumerPipelineEnvObject.ps1
                  Type: PowerShell
                  azurePowershellUseCore: true
                  scriptArguments: -Environments '${{ convertToJson(parameters.environments) }}'

  - ${{ each env in parameters.environments }}:
    - stage: ${{ upper(env.name) }}
      ${{ if eq(env.developmentEnvironment, True) }}:
        condition: and(succeeded(), or(eq(${{ parameters.deployFromFeature }}, true), eq(${{ containsValue(env.deploymentBranches,'*') }},true) ,eq(${{ containsValue(env.deploymentBranches,variables['Build.SourceBranch']) }},true)))
      ${{ else }}:
        condition: and(succeeded(), or(eq(${{ containsValue(env.deploymentBranches,'*') }},true), eq(${{ containsValue(env.deploymentBranches,variables['Build.SourceBranch']) }},true)))
      ${{ if ne(env.dependsOn,'') }}:
        dependsOn: ${{ env.dependsOn }}
      variables:
        - ${{ if ne(env.environment, '') }}:
          - name: environment
            value: ${{ env.environment }}
        - ${{ each envVarFile in parameters.variableFiles }}:
          - template: ${{ replace(envVarFile, '{environment}', env.name) }}
        - name: azurePrimaryAndSecondaryRegions
          value: ${{ format('{0};{1}', env.azureRegions.primary, join(';', env.azureRegions.secondary)) }}
      displayName: ${{ upper(env.name) }}
      ${{ if or(eq(coalesce(env.privateAgentName, env.agentImage, parameters.privateAgentName, parameters.agentImage, 'windows-latest'),env.privateAgentName), eq(coalesce(env.privateAgentName, env.agentImage, parameters.privateAgentName, parameters.agentImage, 'windows-latest' ),parameters.privateAgentName)) }}:
        pool:
          name: "${{ coalesce(env.privateAgentName, parameters.privateAgentName) }}"
      ${{ else }}:
        pool:
          vmImage: "${{ coalesce(env.agentImage, parameters.agentImage, 'windows-latest') }}"
      jobs:
        - ${{ each region in split(variables.azurePrimaryAndSecondaryRegions, ';') }}:
          - ${{ if or(eq(env.azureRegions.primary, region), and(containsvalue(env.azureRegions.secondary, region), eq(coalesce(env.azureRegions.isSecondaryRegionDeploymentActive, true), true))) }}:
            - deployment: ${{ upper(env.name) }}_${{ upper(region) }}
              displayName: Deploy ${{ upper(env.name) }} in ${{ upper(region) }}
              dependsOn:
              - ${{ if and(containsvalue(env.azureRegions.secondary, region), eq(coalesce(env.azureRegions.deployPrimaryAndSecondaryInParallel, true), false)) }}:
                - ${{ upper(env.name) }}_${{ upper(env.azureRegions.primary) }}
              environment: ${{ upper(env.name) }}
              variables:
                - ${{ each customVariable in env.userCustomVariables }}:
                  - ${{ if ne(customVariable.name, '') }}:
                    - name: ${{ customVariable.name }}
                      value: ${{ customVariable.value }}
                  - ${{ if ne(customVariable.template, '') }}:
                    - template: ${{ customVariable.template }}
                - ${{ each file in parameters.regionalVariableFiles }}:
                  - template: ${{ replace(replace(file, '{environment}', env.name), '{region}', lower(region)) }}
              workspace:
                clean: all
              strategy:
                runOnce:
                  deploy:
                    steps:
                      - template: /templates/steps/initialize.yaml
                        parameters:
                          additionalRepositories: ${{ parameters.additionalRepositories }}
                          tokenReplaceLocations: ${{ parameters.filePathsForTransform }}
                          tokenReplaceEscapeConfig: ${{ parameters.tokenReplaceEscapeConfig }}

                      - template: /templates/steps/powershell.yaml
                        parameters:
                          azureResourceManagerConnection: ${{ env.serviceConnection }}
                          scriptsList: ${{ parameters.scriptsList }}
                          variables: ${{ variables }}
                          ${{ if ne(env.KeyVaultList, '') }}:
                            keyVaultList: ${{ env.keyVaultList }}
