parameters:
- name: serviceName
  type: string
- name: deployFromFeature
  type: boolean
  default: false  
- name: deployConfigOnly
  type: boolean
  default: false   
- name: generateFluxManifest
  type: boolean
  default: false
- name: agentImage
  type: string
  default: 'ubuntu-latest'
- name: privateAgentName
  type: string
  default: ''
- name: environments
  type: object
- name: packageFeedName
  type: string
  default: '' 
- name: appBuildConfig
  type: object 
- name: appTestConfig
  type: object
- name: snykConfig
  type: object
- name: npmConfig
  type: object
- name: sonarConfig
  type: object
- name: appDeployConfig
  type: object
  default: null
- name: stepsToSkip
  displayName: Skip steps, tasks
  type: string
  default: ''

variables:
- name: IsDefaultBranchBuild
  value: ${{ or( in(variables['Build.SourceBranch'], 'refs/heads/main','refs/heads/master'), contains(variables['Build.SourceBranch'],'refs/tags') ) }}
- name: IsPrBuild
  value: ${{ eq(variables['Build.Reason'], 'PullRequest') }}
- name: PSHelperDirectory
  value: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/modules/ps-helpers'
- name: AppConfigModuleDirectory
  value: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/modules/app-config'
- name: RunDate
  value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
- name: Revision
  value: $[counter(variables['RunDate'], 0)]
- name: initialVersion
  value: 0.1.0

stages:
  - stage: Application_CI
    displayName: 'Application CI'
    ${{ if ne(parameters.privateAgentName, '') }}:
      pool:
        name: ${{ parameters.privateAgentName }}
    ${{ if eq(parameters.privateAgentName, '') }}:
      pool:
        vmImage: ${{ coalesce(parameters.agentImage, 'ubuntu-latest') }}
    jobs:
      - job: Initialise
        displayName: 'Initialise'     
        steps:
          - checkout: self
            path: s/source

          - checkout: PipelineCommon
            path: s/ADO-Pipeline-Common

          - ${{ if ne(parameters.appBuildConfig.keyVaultName, '') }}:
            - task: AzureKeyVault@2
              displayName: Read KV Secrets
              inputs:
                azureSubscription: ${{ parameters.appBuildConfig.keyVaultServiceConnection }}
                KeyVaultName: ${{ parameters.appBuildConfig.keyVaultName }}
                ${{ if ne(parameters.appBuildConfig.keyVaultSecretFilter, '') }}:
                  SecretsFilter: ${{ parameters.appBuildConfig.keyVaultSecretFilter }}
                RunAsPreJob: false

          - task: PowerShell@2
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/build/Extract-CodeVersion.ps1'
              arguments: >
                  -AppFrameworkType ${{ parameters.appBuildConfig.appFrameworkType }} 
                  -ProjectPath "${{ parameters.appBuildConfig.projectPath }}" 
                  -PSHelperDirectory ${{ variables.PSHelperDirectory }}
              pwsh: true
              workingDirectory: '$(Pipeline.Workspace)/s/source'
            displayName: Get App Version           
            name: GetAppVersion

          - task: PowerShell@2
            displayName: Update Build Number
            name: UpdateBuildNumber
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[build.updatebuildnumber]$(GetAppVersion.appVersion)-$(RunDate)-$(Revision)"
                Write-Host "##vso[task.setvariable variable=appVersion]$(GetAppVersion.appVersion)"

          - task: PowerShell@2
            condition:  |
              and(
                  eq(variables['appVersion'], variables['initialVersion']),
                  eq(variables.IsDefaultBranchBuild, true)   
                  )
            displayName: Setup Azure Pipelines Github App
            name: SetupAzurePipelinesApp
            inputs:
              filePath: $(Agent.BuildDirectory)/s/ADO-Pipeline-Common/templates/powershell/build/Add-RepositoryToGitHubAppInstallation.ps1
              arguments: >
                  -GithubPat $(ADP-PLATFORM-GITHUB-PatToken)
                  -AppInstallationSlug "Azure-Pipelines"
                  -PSHelperDirectory ${{ variables.PSHelperDirectory }}
              failOnStderr: true
              workingDirectory: '$(Pipeline.Workspace)/s/source'
              pwsh: true

      - job: Build
        displayName: 'Build'  
        condition: |
          and(
            succeeded('Initialise'),
            ${{ eq(parameters.deployConfigOnly, false) }},
            ${{ not(contains(parameters.stepsToSkip, 'Build')) }}
          )
        dependsOn: Initialise
        variables:
          appVersion: $[ dependencies.Initialise.outputs['GetAppVersion.appVersion']]
        steps:
          - checkout: self
            path: s/
          - checkout: PipelineCommon
            path: s/ADO-Pipeline-Common

          - ${{ if ne(parameters.appBuildConfig.keyVaultName, '') }}:
            - task: AzureKeyVault@2
              displayName: Read KV Secrets
              inputs:
                azureSubscription: ${{ parameters.appBuildConfig.keyVaultServiceConnection }}
                KeyVaultName: ${{ parameters.appBuildConfig.keyVaultName }}
                ${{ if ne(parameters.appBuildConfig.keyVaultSecretFilter, '') }}:
                  SecretsFilter: ${{ parameters.appBuildConfig.keyVaultSecretFilter }}
                RunAsPreJob: false

          - ${{ if ne(parameters.sonarConfig.sonarConnection, '') }}:
            - template: /templates/steps/sonar-analysis-prepare.yaml
              parameters:
                sonarConfig: ${{ parameters.sonarConfig }}
                appBuildConfig: ${{ parameters.appBuildConfig }}
                appVersion: $(appVersion)
                appRootDir: '$(Pipeline.Workspace)/s'

          - ${{ if eq(parameters.appBuildConfig.appFrameworkType, 'dotnet') }}:
            - template: /templates/steps/dotnet-build.yaml
              parameters:
                frameworkVersion: ${{ parameters.appBuildConfig.frameworkVersion }}
                projectPath: ${{ parameters.appBuildConfig.projectPath }}
                testProjectPath: ${{ parameters.appBuildConfig.testProjectPath }}
                packageFeedName: ${{ parameters.packageFeedName }}

          - ${{ if eq(parameters.appBuildConfig.appFrameworkType, 'nodejs') }}:
            - template: /templates/steps/nodejs-build.yaml
              parameters:
                frameworkVersion: ${{ parameters.appBuildConfig.frameworkVersion }}
                failOnThreshold: ${{ parameters.npmConfig.failOnThreshold }}
                packageFeedName: ${{ parameters.packageFeedName }}  
                sonarConfig: ${{ parameters.sonarConfig }}  

          - ${{ if ne(parameters.sonarConfig.sonarConnection, '') }}:
            - template: /templates/steps/sonar-analysis.yaml

          - ${{ if ne(parameters.snykConfig.snykConnection, '') }}:
            - template: /templates/steps/security-scan-application.yaml
              parameters:
                snykConnection: ${{ parameters.snykConfig.snykConnection }}
                snykOrganizationName: ${{ parameters.snykConfig.snykOrganizationName }}
                acrRepoName: ${{ parameters.appBuildConfig.imageRepoName }}
                manifestPath: ${{ parameters.appBuildConfig.manifestPath }}
                failOnThreshold: ${{ parameters.snykConfig.failOnThreshold }}  

      - job: BuildDockerImage
        displayName: 'Build Docker Image'
        condition:  |
          and(
            succeeded('Initialise'),
            ${{ eq(parameters.deployConfigOnly, false) }},
            ${{ not(contains(parameters.stepsToSkip, 'BuildDockerImage')) }}   
          )
        dependsOn: [Initialise]
        variables:
          appVersion: $[ dependencies.Initialise.outputs['GetAppVersion.appVersion']]
          dockerCacheKey: 'docker | "${{ parameters.appBuildConfig.imageRepoName }}:$(appVersion)" | $(Build.BuildId) | cache'
        steps:
          - checkout: self
            path: s/
          - checkout: PipelineCommon
            path: s/ADO-Pipeline-Common

          - task: Cache@2
            displayName: Cache docker
            inputs:
              key: $(dockerCacheKey)
              path: $(Pipeline.Workspace)/docker
              cacheHitVar: CACHE_RESTORED

          - task: PowerShell@2
            displayName: 'Docker Build Image'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/build/BuildAndPushDockerImage.ps1'
              arguments: >
                 -AcrRepoName '${{ parameters.appBuildConfig.imageRepoName }}' 
                 -ImageVersion  $(appVersion) 
                 -ImageCachePath '$(Pipeline.Workspace)/docker' 
                 -Command 'build'
                 -PSHelperDirectory ${{ variables.PSHelperDirectory }}
              failOnStderr: false
              pwsh: true
              workingDirectory: '$(Pipeline.Workspace)/s'
          - ${{ if ne(parameters.snykConfig.snykConnection, '') }}:
            - template: /templates/steps/security-scan-container.yaml
              parameters:
                snykConnection: ${{ parameters.snykConfig.snykConnection }}
                snykOrganizationName: ${{ parameters.snykConfig.snykOrganizationName }}
                acrRepoName: ${{ parameters.appBuildConfig.imageRepoName }}
                acrRepoTagVersion: $(appVersion)
                failOnThreshold: ${{ parameters.snykConfig.failOnThreshold }}

      - job: PreDeploymentTests
        displayName: 'Pre Deployment Tests'  
        condition: |
          and(
            succeeded('BuildDockerImage'),
            ${{ eq(parameters.deployConfigOnly, false) }},
            ${{ not(contains(parameters.stepsToSkip, 'PreDeploymentTests')) }} 
          )
        dependsOn: [Initialise, BuildDockerImage]
        steps:
          - checkout: self
            path: s/  
          - checkout: PipelineCommon
            path: s/ADO-Pipeline-Common

          - ${{ if ne(parameters.appTestConfig, '') }}:
            - template: /templates/steps/pre-deployment-tests.yaml
              parameters:
                serviceName: ${{ parameters.serviceName }}
                IsPrBuild: ${{ variables.IsPrBuild }}
                appTestConfig: ${{ parameters.appTestConfig }}

      - job: BuildHelmChart
        displayName: 'Build Helm Chart'
        condition:  |
          and(
            succeeded(),
            ${{ eq(parameters.deployConfigOnly, false) }}    
          )
        dependsOn:  [Initialise]
        variables:
          appVersion: $[ dependencies.Initialise.outputs['GetAppVersion.appVersion'] ]
          dockerCacheKey: 'docker | "${{ parameters.appBuildConfig.imageRepoName }}:$(appVersion)" | $(Build.BuildId) | cache'
          helmCacheKey: 'helm | "${{ parameters.appBuildConfig.imageRepoName }}:$(appVersion)" | $(Build.BuildId) | cache'
        steps:
          - checkout: self
            path: s/
          - checkout: PipelineCommon
            path: s/ADO-Pipeline-Common

          - task: Cache@2
            displayName: Cache helm chart
            inputs:
              key: $(helmCacheKey)
              path: $(Pipeline.Workspace)/helm
              cacheHitVar: CACHE_RESTORED

          - task: PowerShell@2
            displayName: 'Helm Lint & Build'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/build/HelmLintAndPublish.ps1'
              arguments: > 
                -ChartVersion  $(appVersion) 
                -ChartCachePath '$(Pipeline.Workspace)/helm' 
                -Command 'lintandbuild' 
                -PSHelperDirectory ${{ variables.PSHelperDirectory }} 
                -chartHomeDir '$(Pipeline.Workspace)/s/helm'
                -ServiceName ${{ parameters.serviceName }}
              failOnStderr: false
              pwsh: true
              workingDirectory: '$(Pipeline.Workspace)/s'  

      - job: PublishArtifacts
        displayName: 'Publish Artifacts'   
        dependsOn: [Initialise,Build,BuildDockerImage,PreDeploymentTests,BuildHelmChart]
        condition: |
          and(
            or(succeeded(), ${{ eq(parameters.appBuildConfig.appFrameworkType, 'helm') }}),
            or(
              eq( variables.IsDefaultBranchBuild , true),
              eq( variables.IsPrBuild , true),
              eq( ${{ parameters.deployFromFeature }} , true)
            ) 
          )
        variables:
          appVersion: $[ dependencies.Initialise.outputs['GetAppVersion.appVersion'] ]
          dockerCacheKey: 'docker | "${{ parameters.appBuildConfig.imageRepoName }}:$(appVersion)" | $(Build.BuildId) | cache'
          helmCacheKey: 'helm | "${{ parameters.appBuildConfig.imageRepoName }}:$(appVersion)" | $(Build.BuildId) | cache'
        steps:
          - checkout: PipelineCommon
            path: s/ADO-Pipeline-Common

          - task: PowerShell@2
            displayName: 'Set App Version'   
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/build/GetSet-CodeVersion.ps1'
              arguments: -Command "Set" -AppVersion $(appVersion) -ArtifactFilePath  $(System.ArtifactsDirectory)/version
              failOnStderr: false
              pwsh: true
              workingDirectory: '$(Pipeline.Workspace)/s' 

          - task: PublishPipelineArtifact@1
            displayName: 'Publish version'
            inputs:
              targetPath: '$(System.ArtifactsDirectory)/version'
              artifact: appversion

          - ${{ if not(contains(parameters.stepsToSkip, 'BuildDockerImage')) }}:
            - task: Cache@2
              displayName: Restore Cached docker image
              inputs:
                key: $(dockerCacheKey)
                path: $(Pipeline.Workspace)/docker
                cacheHitVar: CACHE_RESTORED            
            - task: PublishPipelineArtifact@1
              displayName: 'Publish docker'
              inputs:
                targetPath: '$(Pipeline.Workspace)/docker'
                artifact: docker
                
          - task: Cache@2
            displayName: Restore Cached helm chart
            inputs:
              key: $(helmCacheKey)
              path: $(Pipeline.Workspace)/helm
              cacheHitVar: CACHE_RESTORED  

          - task: PublishPipelineArtifact@1
            displayName: 'Publish helm'
            inputs:
              targetPath: '$(Pipeline.Workspace)/helm'
              artifact: helm
          
          - ${{ if eq(variables.IsDefaultBranchBuild, true) }}:
            - template: /templates/steps/tag-and-release.yaml
              parameters:
                appBuildConfig: ${{ parameters.appBuildConfig }}
                appVersion: $(appVersion)
                PSHelperDirectory: ${{ variables.PSHelperDirectory }}

  - ${{ each deploymentEnv in parameters.environments }}:  
    - ${{ if or( eq(variables.IsDefaultBranchBuild, true), and( or(eq(variables.IsPrBuild, true), eq(parameters.deployFromFeature, true)), eq( deploymentEnv.type,'dev')), eq(parameters.deployConfigOnly, true) ) }}:
      - stage: ${{ deploymentEnv.name }}
        dependsOn:
          - Application_CI
          - ${{ deploymentEnv.dependsOn }}
        displayName: 'Application CD: ${{ deploymentEnv.name }}'
        variables:       
        - ${{ if ne(parameters.appDeployConfig.variableGroups, '') }}:
          - ${{ each varGroup in parameters.appDeployConfig.variableGroups }}:
            - ${{ if contains(varGroup, deploymentEnv.name) }}:
              - group: '${{ varGroup }}'
            - ${{ elseif contains(varGroup, '<environment>') }}:
              - group: ${{ replace(varGroup, '<environment>', deploymentEnv.name) }}    
        - name: serviceName
          value: ${{ parameters.serviceName }}
        - name: PSHelperDirectory
          value: '$(Pipeline.Workspace)/s/ADO-Pipeline-Common/templates/powershell/modules/ps-helpers'
        - name: appVersion
          value: $[ stageDependencies.Application_CI.Initialise.outputs['GetAppVersion.appVersion'] ]
  
        ${{ if ne(deploymentEnv.privateAgentName, '') }}:
          pool:
            name: ${{ deploymentEnv.privateAgentName }}
        ${{ else }}:
          pool:
            vmImage: ${{ coalesce(parameters.agentImage, 'ubuntu-latest') }}
        jobs:        
          - deployment: PublishTo${{ deploymentEnv.name }}
            condition:  |
              or(
                eq( variables.IsDefaultBranchBuild, true),
                eq(${{ parameters.deployConfigOnly }}, true),
                and(
                  or(
                    eq(variables.IsPrBuild, true),
                    eq(${{ parameters.deployFromFeature }},true)
                  ),
                  eq('${{ deploymentEnv.type }}','dev')
                ) 
              ) 
            displayName: 'Publish To ${{ deploymentEnv.name }}'
            environment: ${{ deploymentEnv.name }}
            strategy:
              runOnce:
                deploy:          
                  steps:
                    - ${{ if ne(parameters.appDeployConfig, '') }}:
                      - checkout: Self
                        path: s/ 
                      - checkout: PipelineCommon
                        path: s/ADO-Pipeline-Common
                      - ${{ if eq(parameters.generateFluxManifest, true) }}:
                        - template: /templates/steps/generate-flux-manifest.yaml
                          parameters:
                            TeamName: 'ffc-demo'
                            ServiceName: ${{ parameters.serviceName }}
                            EnvName: 'dev1'
                      - ${{ if ne(parameters.appDeployConfig.variableGroups, '') }}:                         
                        - template: /templates/steps/secrets-import-kv.yaml	                          
                          parameters:
                            serviceConnection: ${{ deploymentEnv.serviceConnection }}
                            appKeyVault:  ${{ deploymentEnv.appKeyVault }}
                            VariableGroups: "${{ join(';', parameters.appDeployConfig.variableGroups) }}"
                            VarFilter: "${{ join(';', parameters.appDeployConfig.variables) }}"
                            ProgrammeName: "${{ parameters.appDeployConfig.programmeName }}"
                            EnvName: ${{ deploymentEnv.name }}
                            PSHelperDirectory: ${{ variables.PSHelperDirectory }}
                      - ${{ if not(contains(parameters.stepsToSkip, 'AppConfigImport')) }}:
                        - template: /templates/steps/appconfig-import.yaml
                          parameters:
                            dryRun: false
                            environmentObj: ${{ deploymentEnv }} 
                            appDeployConfig: ${{ parameters.appDeployConfig }}
                            workingDirectory: '$(Pipeline.Workspace)/s'
                            serviceName: ${{ parameters.serviceName }}
                            configFileType: ${{ coalesce(parameters.appDeployConfig.filetype, 'json') }}
                            PSHelperDirectory: ${{ variables.PSHelperDirectory }}
                            AppConfigModuleDirectory: ${{ variables.AppConfigModuleDirectory }}
                            Version: $(appVersion)
                            FullBuild: ${{ eq(parameters.deployConfigOnly, false) }}

                    - ${{ if eq(parameters.deployConfigOnly, false )}}:
                      - template: /templates/steps/common-app-cd.yaml
                        parameters:
                            serviceName: ${{ parameters.serviceName }}
                            environmentObj: ${{ deploymentEnv }}
                            appBuildConfig: ${{ parameters.appBuildConfig }}
                            appDeployConfig: ${{ parameters.appDeployConfig }}
                            PSHelperDirectory: ${{ variables.PSHelperDirectory }}
                            stepsToSkip: ${{ parameters.stepsToSkip }}

                      - ${{ if and(eq(deploymentEnv.name, parameters.appTestConfig.postDeployTest.envToTest),not(contains(parameters.stepsToSkip, 'PostDeploymentTests'))) }}:
                        - template: /templates/steps/post-deployment-tests.yaml
                          parameters:
                            url: "${{ parameters.serviceName }}.${{ deploymentEnv.name }}.${{ parameters.appTestConfig.postDeployTest.domain }}"